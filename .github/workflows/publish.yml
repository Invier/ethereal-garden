name: Publish NPM Package

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      publish_to_npm:
        description: 'Publish to NPM'
        required: true
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build:package

      - name: Test dry run publish
        run: npm run publish:dry

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_npm == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build:package

      - name: Determine version bump
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (remove 'v' prefix)
            NEW_VERSION="${{ github.ref_name }}"
            NEW_VERSION="${NEW_VERSION#v}"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "skip_version_bump=true" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            # Check commit message for version hints
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            if [[ "$COMMIT_MSG" =~ \[major\] ]]; then
              VERSION_TYPE="major"
            elif [[ "$COMMIT_MSG" =~ \[minor\] ]]; then
              VERSION_TYPE="minor"
            else
              VERSION_TYPE="patch"
            fi
          else
            VERSION_TYPE="patch"
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "skip_version_bump=false" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.version.outputs.skip_version_bump != 'true'
        run: |
          npm version ${{ steps.version.outputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set version from tag
        if: steps.version.outputs.skip_version_bump == 'true'
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          echo "NEW_VERSION=${{ steps.version.outputs.new_version }}" >> $GITHUB_ENV

      - name: Update package.json version in git
        if: steps.version.outputs.skip_version_bump != 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || exit 0
          git tag "v$NEW_VERSION"
          git push origin ${{ github.ref_name }}
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: env.NEW_VERSION != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: |
            ## Changes in v${{ env.NEW_VERSION }}
            
            ### Component Library Updates
            - Updated ethereal-ui component library
            - See commit history for detailed changes
            
            ### Installation
            ```bash
            npm install ethereal-ui@${{ env.NEW_VERSION }}
            ```
            
            ### Documentation
            Visit [ethereal.garden](https://ethereal.garden) for full documentation.
          draft: false
          prerelease: ${{ contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'rc') }}

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post-publish notification
        run: |
          echo "âœ… Successfully published ethereal-ui@$NEW_VERSION to NPM"
          echo "ðŸ“¦ Package: https://www.npmjs.com/package/ethereal-ui"
          echo "ðŸ“– Documentation: https://ethereal.garden"

  publish-beta:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build:package

      - name: Create beta version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BETA_VERSION="$CURRENT_VERSION-beta.$SAFE_BRANCH_NAME.$TIMESTAMP"
          npm version "$BETA_VERSION" --no-git-tag-version
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_ENV

      - name: Publish beta to NPM
        run: npm publish --tag beta --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Beta version published!**
              
              \`\`\`bash
              npm install ethereal-ui@${{ env.BETA_VERSION }}
              \`\`\`
              
              This beta version includes the changes from this PR and can be used for testing.`
            }) 